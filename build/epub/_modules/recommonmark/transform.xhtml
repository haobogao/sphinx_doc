<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>recommonmark.transform</title>
    <link rel="stylesheet" href="../../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" href="../../_static/epub.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../../_static/graphviz.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <h1>Source code for recommonmark.transform</h1><div class="highlight"><pre>
<span></span><span class="sd">&quot;&quot;&quot;Implement some common transforms on parsed AST.&quot;&quot;&quot;</span>

<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">re</span>

<span class="kn">from</span> <span class="nn">docutils</span> <span class="kn">import</span> <span class="n">nodes</span><span class="p">,</span> <span class="n">transforms</span>
<span class="kn">from</span> <span class="nn">docutils.statemachine</span> <span class="kn">import</span> <span class="n">StringList</span>
<span class="kn">from</span> <span class="nn">docutils.parsers.rst</span> <span class="kn">import</span> <span class="n">Parser</span>
<span class="kn">from</span> <span class="nn">docutils.utils</span> <span class="kn">import</span> <span class="n">new_document</span>
<span class="kn">from</span> <span class="nn">sphinx</span> <span class="kn">import</span> <span class="n">addnodes</span>

<span class="kn">from</span> <span class="nn">.states</span> <span class="kn">import</span> <span class="n">DummyStateMachine</span>


<div class="viewcode-block" id="AutoStructify"><a class="viewcode-back" href="../../chap/doc/spec.xhtml#recommonmark.transform.AutoStructify">[docs]</a><span class="k">class</span> <span class="nc">AutoStructify</span><span class="p">(</span><span class="n">transforms</span><span class="o">.</span><span class="n">Transform</span><span class="p">):</span>

    <span class="sd">&quot;&quot;&quot;Automatically try to transform blocks to sphinx directives.</span>

<span class="sd">    This class is designed to handle AST generated by CommonMarkParser.</span>
<span class="sd">    &quot;&quot;&quot;</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="n">transforms</span><span class="o">.</span><span class="n">Transform</span><span class="o">.</span><span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">reporter</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">document</span><span class="o">.</span><span class="n">reporter</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">config</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">default_config</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">new_cfg</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">document</span><span class="o">.</span><span class="n">settings</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">recommonmark_config</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">new_cfg</span><span class="p">)</span>
        <span class="k">except</span> <span class="ne">AttributeError</span><span class="p">:</span>
            <span class="k">pass</span>

        <span class="c1"># Deprecation notices</span>
        <span class="c1"># TODO move this check to an extension pattern, and only call once</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;enable_auto_doc_ref&#39;</span><span class="p">,</span> <span class="kc">False</span><span class="p">):</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">reporter</span><span class="o">.</span><span class="n">warning</span><span class="p">(</span>
                <span class="s1">&#39;AutoStructify option &quot;enable_auto_doc_ref&quot; is deprecated&#39;</span><span class="p">)</span>

    <span class="c1"># set to a high priority so it can be applied first for markdown docs</span>
    <span class="n">default_priority</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="n">suffix_set</span> <span class="o">=</span> <span class="nb">set</span><span class="p">([</span><span class="s1">&#39;md&#39;</span><span class="p">,</span> <span class="s1">&#39;rst&#39;</span><span class="p">])</span>

    <span class="n">default_config</span> <span class="o">=</span> <span class="p">{</span>
        <span class="s1">&#39;enable_auto_doc_ref&#39;</span><span class="p">:</span> <span class="kc">False</span><span class="p">,</span>
        <span class="s1">&#39;auto_toc_maxdepth&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
        <span class="s1">&#39;auto_toc_tree_section&#39;</span><span class="p">:</span> <span class="kc">None</span><span class="p">,</span>
        <span class="s1">&#39;enable_auto_toc_tree&#39;</span><span class="p">:</span> <span class="kc">True</span><span class="p">,</span>
        <span class="s1">&#39;enable_eval_rst&#39;</span><span class="p">:</span> <span class="kc">True</span><span class="p">,</span>
        <span class="s1">&#39;enable_math&#39;</span><span class="p">:</span> <span class="kc">True</span><span class="p">,</span>
        <span class="s1">&#39;enable_inline_math&#39;</span><span class="p">:</span> <span class="kc">True</span><span class="p">,</span>
        <span class="s1">&#39;commonmark_suffixes&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;.md&#39;</span><span class="p">],</span>
        <span class="s1">&#39;url_resolver&#39;</span><span class="p">:</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">,</span>
        <span class="s1">&#39;known_url_schemes&#39;</span><span class="p">:</span> <span class="kc">None</span><span class="p">,</span>
    <span class="p">}</span>

    <span class="k">def</span> <span class="nf">parse_ref</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">ref</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Analyze the ref block, and return the information needed.</span>

<span class="sd">        Parameters</span>
<span class="sd">        ----------</span>
<span class="sd">        ref : nodes.reference</span>

<span class="sd">        Returns</span>
<span class="sd">        -------</span>
<span class="sd">        result : tuple of (str, str, str)</span>
<span class="sd">            The returned result is tuple of (title, uri, docpath).</span>
<span class="sd">            title is the display title of the ref.</span>
<span class="sd">            uri is the html uri of to the ref after resolve.</span>
<span class="sd">            docpath is the absolute document path to the document, if</span>
<span class="sd">            the target corresponds to an internal document, this can bex None</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="n">title</span> <span class="o">=</span> <span class="kc">None</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">ref</span><span class="o">.</span><span class="n">children</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">title</span> <span class="o">=</span> <span class="n">ref</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="s1">&#39;name&#39;</span> <span class="ow">in</span> <span class="n">ref</span> <span class="k">else</span> <span class="kc">None</span>
        <span class="k">elif</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">ref</span><span class="o">.</span><span class="n">children</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">nodes</span><span class="o">.</span><span class="n">Text</span><span class="p">):</span>
            <span class="n">title</span> <span class="o">=</span> <span class="n">ref</span><span class="o">.</span><span class="n">children</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">astext</span><span class="p">()</span>
        <span class="n">uri</span> <span class="o">=</span> <span class="n">ref</span><span class="p">[</span><span class="s1">&#39;refuri&#39;</span><span class="p">]</span>
        <span class="k">if</span> <span class="n">uri</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s1">&#39;://&#39;</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">(</span><span class="n">title</span><span class="p">,</span> <span class="n">uri</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>
        <span class="n">anchor</span> <span class="o">=</span> <span class="kc">None</span>
        <span class="n">arr</span> <span class="o">=</span> <span class="n">uri</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;#&#39;</span><span class="p">)</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span> <span class="o">==</span> <span class="mi">2</span><span class="p">:</span>
            <span class="n">anchor</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">2</span> <span class="ow">or</span> <span class="nb">len</span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">(</span><span class="n">title</span><span class="p">,</span> <span class="n">uri</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>
        <span class="n">uri</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>

        <span class="n">abspath</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">abspath</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">file_dir</span><span class="p">,</span> <span class="n">uri</span><span class="p">))</span>
        <span class="n">relpath</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">relpath</span><span class="p">(</span><span class="n">abspath</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">root_dir</span><span class="p">)</span>
        <span class="n">suffix</span> <span class="o">=</span> <span class="n">abspath</span><span class="o">.</span><span class="n">rsplit</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">suffix</span><span class="p">)</span> <span class="o">==</span> <span class="mi">2</span> <span class="ow">and</span> <span class="n">suffix</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="ow">in</span> <span class="n">AutoStructify</span><span class="o">.</span><span class="n">suffix_set</span> <span class="ow">and</span> <span class="p">(</span>
                <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="n">abspath</span><span class="p">)</span> <span class="ow">and</span> <span class="n">abspath</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">root_dir</span><span class="p">)):</span>
            <span class="c1"># replace the path separator if running on non-UNIX environment</span>
            <span class="k">if</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">sep</span> <span class="o">!=</span> <span class="s1">&#39;/&#39;</span><span class="p">:</span>
                <span class="n">relpath</span> <span class="o">=</span> <span class="n">relpath</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">sep</span><span class="p">,</span> <span class="s1">&#39;/&#39;</span><span class="p">)</span>
            <span class="n">docpath</span> <span class="o">=</span> <span class="s1">&#39;/&#39;</span> <span class="o">+</span> <span class="n">relpath</span><span class="o">.</span><span class="n">rsplit</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
            <span class="c1"># rewrite suffix to html, this is suboptimal</span>
            <span class="n">uri</span> <span class="o">=</span> <span class="n">docpath</span> <span class="o">+</span> <span class="s1">&#39;.html&#39;</span>
            <span class="k">if</span> <span class="n">anchor</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>
                <span class="k">return</span> <span class="p">(</span><span class="n">title</span><span class="p">,</span> <span class="n">uri</span><span class="p">,</span> <span class="n">docpath</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">return</span> <span class="p">(</span><span class="n">title</span><span class="p">,</span> <span class="n">uri</span> <span class="o">+</span> <span class="s1">&#39;#&#39;</span> <span class="o">+</span> <span class="n">anchor</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="c1"># use url resolver</span>
            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">url_resolver</span><span class="p">:</span>
                <span class="n">uri</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">url_resolver</span><span class="p">(</span><span class="n">relpath</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">anchor</span><span class="p">:</span>
                <span class="n">uri</span> <span class="o">+=</span> <span class="s1">&#39;#&#39;</span> <span class="o">+</span> <span class="n">anchor</span>
            <span class="k">return</span> <span class="p">(</span><span class="n">title</span><span class="p">,</span> <span class="n">uri</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">auto_toc_tree</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">node</span><span class="p">):</span>  <span class="c1"># pylint: disable=too-many-branches</span>
        <span class="sd">&quot;&quot;&quot;Try to convert a list block to toctree in rst.</span>

<span class="sd">        This function detects if the matches the condition and return</span>
<span class="sd">        a converted toc tree node. The matching condition:</span>
<span class="sd">        The list only contains one level, and only contains references</span>

<span class="sd">        Parameters</span>
<span class="sd">        ----------</span>
<span class="sd">        node: nodes.Sequential</span>
<span class="sd">            A list node in the doctree</span>

<span class="sd">        Returns</span>
<span class="sd">        -------</span>
<span class="sd">        tocnode: docutils node</span>
<span class="sd">            The converted toc tree node, None if conversion is not possible.</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">config</span><span class="p">[</span><span class="s1">&#39;enable_auto_toc_tree&#39;</span><span class="p">]:</span>
            <span class="k">return</span> <span class="kc">None</span>
        <span class="c1"># when auto_toc_tree_section is set</span>
        <span class="c1"># only auto generate toctree under the specified section title</span>
        <span class="n">sec</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">config</span><span class="p">[</span><span class="s1">&#39;auto_toc_tree_section&#39;</span><span class="p">]</span>
        <span class="k">if</span> <span class="n">sec</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">node</span><span class="o">.</span><span class="n">parent</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>
                <span class="k">return</span> <span class="kc">None</span>
            <span class="n">title</span> <span class="o">=</span> <span class="kc">None</span>
            <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">parent</span><span class="p">,</span> <span class="n">nodes</span><span class="o">.</span><span class="n">section</span><span class="p">):</span>
                <span class="n">child</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">first_child_matching_class</span><span class="p">(</span><span class="n">nodes</span><span class="o">.</span><span class="n">title</span><span class="p">)</span>
                <span class="k">if</span> <span class="n">child</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span><span class="p">:</span>
                    <span class="n">title</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">children</span><span class="p">[</span><span class="n">child</span><span class="p">]</span>
            <span class="k">elif</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">parent</span><span class="p">,</span> <span class="n">nodes</span><span class="o">.</span><span class="n">paragraph</span><span class="p">):</span>
                <span class="n">child</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">first_child_matching_class</span><span class="p">(</span><span class="n">nodes</span><span class="o">.</span><span class="n">title</span><span class="p">)</span>
                <span class="k">if</span> <span class="n">child</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span><span class="p">:</span>
                    <span class="n">title</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">children</span><span class="p">[</span><span class="n">child</span><span class="p">]</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">title</span><span class="p">:</span>
                <span class="k">return</span> <span class="kc">None</span>
            <span class="k">if</span> <span class="n">title</span><span class="o">.</span><span class="n">astext</span><span class="p">()</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span> <span class="o">!=</span> <span class="n">sec</span><span class="p">:</span>
                <span class="k">return</span> <span class="kc">None</span>

        <span class="n">numbered</span> <span class="o">=</span> <span class="kc">None</span>
        <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">nodes</span><span class="o">.</span><span class="n">bullet_list</span><span class="p">):</span>
            <span class="n">numbered</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">elif</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">nodes</span><span class="o">.</span><span class="n">enumerated_list</span><span class="p">):</span>
            <span class="n">numbered</span> <span class="o">=</span> <span class="mi">1</span>

        <span class="k">if</span> <span class="n">numbered</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>
            <span class="k">return</span> <span class="kc">None</span>
        <span class="n">refs</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">nd</span> <span class="ow">in</span> <span class="n">node</span><span class="o">.</span><span class="n">children</span><span class="p">[:]:</span>
            <span class="k">assert</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">nd</span><span class="p">,</span> <span class="n">nodes</span><span class="o">.</span><span class="n">list_item</span><span class="p">)</span>
            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">nd</span><span class="o">.</span><span class="n">children</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">:</span>
                <span class="k">return</span> <span class="kc">None</span>
            <span class="n">par</span> <span class="o">=</span> <span class="n">nd</span><span class="o">.</span><span class="n">children</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">par</span><span class="p">,</span> <span class="n">nodes</span><span class="o">.</span><span class="n">paragraph</span><span class="p">):</span>
                <span class="k">return</span> <span class="kc">None</span>
            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">par</span><span class="o">.</span><span class="n">children</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">:</span>
                <span class="k">return</span> <span class="kc">None</span>
            <span class="n">ref</span> <span class="o">=</span> <span class="n">par</span><span class="o">.</span><span class="n">children</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
            <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">ref</span><span class="p">,</span> <span class="n">addnodes</span><span class="o">.</span><span class="n">pending_xref</span><span class="p">):</span>
                <span class="n">ref</span> <span class="o">=</span> <span class="n">ref</span><span class="o">.</span><span class="n">children</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">ref</span><span class="p">,</span> <span class="n">nodes</span><span class="o">.</span><span class="n">reference</span><span class="p">):</span>
                <span class="k">return</span> <span class="kc">None</span>
            <span class="n">title</span><span class="p">,</span> <span class="n">uri</span><span class="p">,</span> <span class="n">docpath</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">parse_ref</span><span class="p">(</span><span class="n">ref</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">title</span> <span class="ow">is</span> <span class="kc">None</span> <span class="ow">or</span> <span class="n">uri</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s1">&#39;#&#39;</span><span class="p">):</span>
                <span class="k">return</span> <span class="kc">None</span>
            <span class="k">if</span> <span class="n">docpath</span><span class="p">:</span>
                <span class="n">refs</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">title</span><span class="p">,</span> <span class="n">docpath</span><span class="p">))</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">refs</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">title</span><span class="p">,</span> <span class="n">uri</span><span class="p">))</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">state_machine</span><span class="o">.</span><span class="n">reset</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">document</span><span class="p">,</span>
                                 <span class="n">node</span><span class="o">.</span><span class="n">parent</span><span class="p">,</span>
                                 <span class="bp">self</span><span class="o">.</span><span class="n">current_level</span><span class="p">)</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">state_machine</span><span class="o">.</span><span class="n">run_directive</span><span class="p">(</span>
            <span class="s1">&#39;toctree&#39;</span><span class="p">,</span>
            <span class="n">options</span><span class="o">=</span><span class="p">{</span>
                <span class="s1">&#39;maxdepth&#39;</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">config</span><span class="p">[</span><span class="s1">&#39;auto_toc_maxdepth&#39;</span><span class="p">],</span>
                <span class="s1">&#39;numbered&#39;</span><span class="p">:</span> <span class="n">numbered</span><span class="p">,</span>
            <span class="p">},</span>
            <span class="n">content</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;</span><span class="si">%s</span><span class="s1"> &lt;</span><span class="si">%s</span><span class="s1">&gt;&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">refs</span><span class="p">])</span>

    <span class="k">def</span> <span class="nf">auto_inline_code</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">node</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Try to automatically generate nodes for inline literals.</span>

<span class="sd">        Parameters</span>
<span class="sd">        ----------</span>
<span class="sd">        node : nodes.literal</span>
<span class="sd">            Original codeblock node</span>
<span class="sd">        Returns</span>
<span class="sd">        -------</span>
<span class="sd">        tocnode: docutils node</span>
<span class="sd">            The converted toc tree node, None if conversion is not possible.</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="k">assert</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">nodes</span><span class="o">.</span><span class="n">literal</span><span class="p">)</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">children</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">:</span>
            <span class="k">return</span> <span class="kc">None</span>
        <span class="n">content</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="n">children</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">content</span><span class="p">,</span> <span class="n">nodes</span><span class="o">.</span><span class="n">Text</span><span class="p">):</span>
            <span class="k">return</span> <span class="kc">None</span>
        <span class="n">content</span> <span class="o">=</span> <span class="n">content</span><span class="o">.</span><span class="n">astext</span><span class="p">()</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">content</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s1">&#39;$&#39;</span><span class="p">)</span> <span class="ow">and</span> <span class="n">content</span><span class="o">.</span><span class="n">endswith</span><span class="p">(</span><span class="s1">&#39;$&#39;</span><span class="p">):</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">config</span><span class="p">[</span><span class="s1">&#39;enable_inline_math&#39;</span><span class="p">]:</span>
                <span class="k">return</span> <span class="kc">None</span>
            <span class="n">content</span> <span class="o">=</span> <span class="n">content</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">state_machine</span><span class="o">.</span><span class="n">reset</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">document</span><span class="p">,</span>
                                     <span class="n">node</span><span class="o">.</span><span class="n">parent</span><span class="p">,</span>
                                     <span class="bp">self</span><span class="o">.</span><span class="n">current_level</span><span class="p">)</span>
            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">state_machine</span><span class="o">.</span><span class="n">run_role</span><span class="p">(</span><span class="s1">&#39;math&#39;</span><span class="p">,</span> <span class="n">content</span><span class="o">=</span><span class="n">content</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="kc">None</span>

    <span class="k">def</span> <span class="nf">auto_code_block</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">node</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Try to automatically generate nodes for codeblock syntax.</span>

<span class="sd">        Parameters</span>
<span class="sd">        ----------</span>
<span class="sd">        node : nodes.literal_block</span>
<span class="sd">            Original codeblock node</span>
<span class="sd">        Returns</span>
<span class="sd">        -------</span>
<span class="sd">        tocnode: docutils node</span>
<span class="sd">            The converted toc tree node, None if conversion is not possible.</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="k">assert</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">nodes</span><span class="o">.</span><span class="n">literal_block</span><span class="p">)</span>
        <span class="n">original_node</span> <span class="o">=</span> <span class="n">node</span>
        <span class="k">if</span> <span class="s1">&#39;language&#39;</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">node</span><span class="p">:</span>
            <span class="k">return</span> <span class="kc">None</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">state_machine</span><span class="o">.</span><span class="n">reset</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">document</span><span class="p">,</span>
                                 <span class="n">node</span><span class="o">.</span><span class="n">parent</span><span class="p">,</span>
                                 <span class="bp">self</span><span class="o">.</span><span class="n">current_level</span><span class="p">)</span>
        <span class="n">content</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="n">rawsource</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>
        <span class="n">language</span> <span class="o">=</span> <span class="n">node</span><span class="p">[</span><span class="s1">&#39;language&#39;</span><span class="p">]</span>
        <span class="k">if</span> <span class="n">language</span> <span class="o">==</span> <span class="s1">&#39;math&#39;</span><span class="p">:</span>
            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">config</span><span class="p">[</span><span class="s1">&#39;enable_math&#39;</span><span class="p">]:</span>
                <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">state_machine</span><span class="o">.</span><span class="n">run_directive</span><span class="p">(</span>
                    <span class="s1">&#39;math&#39;</span><span class="p">,</span> <span class="n">content</span><span class="o">=</span><span class="n">content</span><span class="p">)</span>
        <span class="k">elif</span> <span class="n">language</span> <span class="o">==</span> <span class="s1">&#39;eval_rst&#39;</span><span class="p">:</span>
            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">config</span><span class="p">[</span><span class="s1">&#39;enable_eval_rst&#39;</span><span class="p">]:</span>
                <span class="c1"># allow embed non section level rst</span>
                <span class="n">node</span> <span class="o">=</span> <span class="n">nodes</span><span class="o">.</span><span class="n">section</span><span class="p">()</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">state_machine</span><span class="o">.</span><span class="n">state</span><span class="o">.</span><span class="n">nested_parse</span><span class="p">(</span>
                    <span class="n">StringList</span><span class="p">(</span><span class="n">content</span><span class="p">,</span> <span class="n">source</span><span class="o">=</span><span class="n">original_node</span><span class="o">.</span><span class="n">source</span><span class="p">),</span>
                    <span class="mi">0</span><span class="p">,</span> <span class="n">node</span><span class="o">=</span><span class="n">node</span><span class="p">,</span> <span class="n">match_titles</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
                <span class="k">return</span> <span class="n">node</span><span class="o">.</span><span class="n">children</span><span class="p">[:]</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">match</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s1">&#39;[ ]?[\w_-]+::.*&#39;</span><span class="p">,</span> <span class="n">language</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">match</span><span class="p">:</span>
                <span class="n">parser</span> <span class="o">=</span> <span class="n">Parser</span><span class="p">()</span>
                <span class="n">new_doc</span> <span class="o">=</span> <span class="n">new_document</span><span class="p">(</span><span class="kc">None</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">document</span><span class="o">.</span><span class="n">settings</span><span class="p">)</span>
                <span class="n">newsource</span> <span class="o">=</span> <span class="sa">u</span><span class="s1">&#39;.. &#39;</span> <span class="o">+</span> <span class="n">match</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span> <span class="o">+</span> <span class="n">node</span><span class="o">.</span><span class="n">rawsource</span>
                <span class="n">parser</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">newsource</span><span class="p">,</span> <span class="n">new_doc</span><span class="p">)</span>
                <span class="k">return</span> <span class="n">new_doc</span><span class="o">.</span><span class="n">children</span><span class="p">[:]</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">state_machine</span><span class="o">.</span><span class="n">run_directive</span><span class="p">(</span>
                    <span class="s1">&#39;code-block&#39;</span><span class="p">,</span> <span class="n">arguments</span><span class="o">=</span><span class="p">[</span><span class="n">language</span><span class="p">],</span>
                    <span class="n">content</span><span class="o">=</span><span class="n">content</span><span class="p">)</span>
        <span class="k">return</span> <span class="kc">None</span>

    <span class="k">def</span> <span class="nf">find_replace</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">node</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Try to find replace node for current node.</span>

<span class="sd">        Parameters</span>
<span class="sd">        ----------</span>
<span class="sd">        node : docutil node</span>
<span class="sd">            Node to find replacement for.</span>

<span class="sd">        Returns</span>
<span class="sd">        -------</span>
<span class="sd">        nodes : node or list of node</span>
<span class="sd">            The replacement nodes of current node.</span>
<span class="sd">            Returns None if no replacement can be found.</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="n">newnode</span> <span class="o">=</span> <span class="kc">None</span>
        <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">nodes</span><span class="o">.</span><span class="n">Sequential</span><span class="p">):</span>
            <span class="n">newnode</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">auto_toc_tree</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
        <span class="k">elif</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">nodes</span><span class="o">.</span><span class="n">literal_block</span><span class="p">):</span>
            <span class="n">newnode</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">auto_code_block</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
        <span class="k">elif</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">nodes</span><span class="o">.</span><span class="n">literal</span><span class="p">):</span>
            <span class="n">newnode</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">auto_inline_code</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">newnode</span>

    <span class="k">def</span> <span class="nf">traverse</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">node</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Traverse the document tree rooted at node.</span>

<span class="sd">        node : docutil node</span>
<span class="sd">            current root node to traverse</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="n">old_level</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">current_level</span>
        <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">nodes</span><span class="o">.</span><span class="n">section</span><span class="p">):</span>
            <span class="k">if</span> <span class="s1">&#39;level&#39;</span> <span class="ow">in</span> <span class="n">node</span><span class="p">:</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">current_level</span> <span class="o">=</span> <span class="n">node</span><span class="p">[</span><span class="s1">&#39;level&#39;</span><span class="p">]</span>
        <span class="n">to_visit</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">to_replace</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">node</span><span class="o">.</span><span class="n">children</span><span class="p">[:]:</span>
            <span class="n">newnode</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">find_replace</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">newnode</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span><span class="p">:</span>
                <span class="n">to_replace</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">c</span><span class="p">,</span> <span class="n">newnode</span><span class="p">))</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">to_visit</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>

        <span class="k">for</span> <span class="n">oldnode</span><span class="p">,</span> <span class="n">newnodes</span> <span class="ow">in</span> <span class="n">to_replace</span><span class="p">:</span>
            <span class="n">node</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="n">oldnode</span><span class="p">,</span> <span class="n">newnodes</span><span class="p">)</span>

        <span class="k">for</span> <span class="n">child</span> <span class="ow">in</span> <span class="n">to_visit</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">traverse</span><span class="p">(</span><span class="n">child</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">current_level</span> <span class="o">=</span> <span class="n">old_level</span>

    <span class="k">def</span> <span class="nf">apply</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Apply the transformation by configuration.&quot;&quot;&quot;</span>
        <span class="n">source</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">document</span><span class="p">[</span><span class="s1">&#39;source&#39;</span><span class="p">]</span>

        <span class="bp">self</span><span class="o">.</span><span class="n">reporter</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s1">&#39;AutoStructify: </span><span class="si">%s</span><span class="s1">&#39;</span> <span class="o">%</span> <span class="n">source</span><span class="p">)</span>

        <span class="c1"># only transform markdowns</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">source</span><span class="o">.</span><span class="n">endswith</span><span class="p">(</span><span class="nb">tuple</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">config</span><span class="p">[</span><span class="s1">&#39;commonmark_suffixes&#39;</span><span class="p">])):</span>
            <span class="k">return</span>

        <span class="bp">self</span><span class="o">.</span><span class="n">url_resolver</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">config</span><span class="p">[</span><span class="s1">&#39;url_resolver&#39;</span><span class="p">]</span>
        <span class="k">assert</span> <span class="n">callable</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">url_resolver</span><span class="p">)</span>

        <span class="bp">self</span><span class="o">.</span><span class="n">state_machine</span> <span class="o">=</span> <span class="n">DummyStateMachine</span><span class="p">()</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">current_level</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">file_dir</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">abspath</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">document</span><span class="p">[</span><span class="s1">&#39;source&#39;</span><span class="p">]))</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">root_dir</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">abspath</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">document</span><span class="o">.</span><span class="n">settings</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">srcdir</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">traverse</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">document</span><span class="p">)</span></div>
</pre></div>

            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>